diff --git a/middleware/v1/adapter/RecordBufferSnapShot/RecordBufferSnapShot.cpp b/middleware/v1/adapter/RecordBufferSnapShot/RecordBufferSnapShot.cpp
old mode 100644
new mode 100755
index ca2226f..78f532a
--- a/middleware/v1/adapter/RecordBufferSnapShot/RecordBufferSnapShot.cpp
+++ b/middleware/v1/adapter/RecordBufferSnapShot/RecordBufferSnapShot.cpp
@@ -836,14 +836,15 @@ processJpg()
         }
     }
     // encode jpeg here
-    {
+    {     
         sp<ExifJpegUtils> pExifJpegUtils = ExifJpegUtils::createInstance(
                                                             getOpenId(),
                                                             halMeta,
                                                             appMeta,
                                                             mpImageBuffer[BUF_JPG]->getImageBufferHeap(),
                                                             mpImageBuffer[BUF_YUV_MAIN],
-                                                            mbHasThumb ? mpImageBuffer[BUF_YUV_THUMB] : NULL);
+                                                            mbHasThumb ? mpImageBuffer[BUF_YUV_THUMB] : NULL,
+                                                            5);//lwl add
         if( !pExifJpegUtils.get() )
         {
             MY_LOGE("create exif jpeg encode utils fail");
diff --git a/middleware/v1/adapter/Scenario/Shot/Android.mk b/middleware/v1/adapter/Scenario/Shot/Android.mk
index e22096a..bd70a77 100755
--- a/middleware/v1/adapter/Scenario/Shot/Android.mk
+++ b/middleware/v1/adapter/Scenario/Shot/Android.mk
@@ -52,6 +52,8 @@ LOCAL_SRC_FILES += \
     ShotFactory.hdr.cpp\
     ShotFactory.vss.cpp\
     ShotFactory.cpp \
+    WaterMark.cpp \
+    AlgoGomeWaterMark.c \
 
 
 ifeq ($(MTKCAM_HAVE_COMMON_CAPTURE_PIPELINE_SUPPORT), 1)
@@ -65,6 +67,8 @@ LOCAL_C_INCLUDES += $(MY_ADAPTER_C_INCLUDES)
 LOCAL_C_INCLUDES += $(TOP)/$(MTK_PATH_SOURCE)/hardware/mtkcam/include
 LOCAL_C_INCLUDES += $(TOP)/$(MTK_PATH_SOURCE)/hardware/gralloc_extra/include
 LOCAL_C_INCLUDES += $(MTK_PATH_CUSTOM_PLATFORM)/hal/inc
+LOCAL_C_INCLUDES += $(TOP)/$(MTK_PATH_SOURCE)/hardware/mtkcam
+LOCAL_C_INCLUDES += $(TOP)/external/libpng
 #
 LOCAL_C_INCLUDES += $(TOP)/$(MTK_PATH_SOURCE)/frameworks/av/include
 LOCAL_C_INCLUDES += $(TOP)/frameworks/native/libs/nativebase/include
diff --git a/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.cpp b/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.cpp
old mode 100644
new mode 100755
index 4f03c0e..d69f538
--- a/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.cpp
+++ b/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.cpp
@@ -87,6 +87,7 @@ using namespace NSCam::Utils;
 #include <mtkcam/feature/effectHalBase/ICallbackClientMgr.h>
 
 #include "BeautyEngine.h"
+#include <mtkcam/middleware/v1/camshot/WaterMark.h>//lwl add
 
 using namespace android;
 using namespace NSShot;
@@ -142,14 +143,14 @@ using NSCam::NSIoPipe::NSSImager::IImageTransform;
 wp<ScenarioCtrl> ZsdVendorShot::m_wpScenarioCtrl = nullptr;
 
 static int arc_beauty_params[8][4] = {
-            {0,  0,  0, 0},
-            {10, 10, 5, 5},
-            {25, 20, 15, 15},
-            {40, 30, 25, 25},
-            {50, 40, 35, 35},
-            {63, 50, 45, 45},
-            {76, 60, 55, 55},
-            {89, 70, 65, 65}
+    {0,  0,  0, 0},
+    {10, 10, 5, 5},
+    {17, 18, 15, 10},
+    {24, 26, 25, 15},
+    {36, 34, 35, 20},
+    {43, 42, 45, 25},
+    {50, 50, 55, 30},
+    {57, 58, 65, 35}
 };
 /******************************************************************************
  *
@@ -1146,9 +1147,9 @@ createStreams()
     MSize const previewsize     = MSize(mShotParam.mi4PostviewWidth, mShotParam.mi4PostviewHeight);
     MINT const previewfmt       = static_cast<EImageFormat>(mShotParam.miPostviewDisplayFormat);
     //#if MTK_CAM_YUV420_JPEG_ENCODE_SUPPORT
-    MINT const yuvfmt_main      = eImgFmt_NV21;
+    //MINT const yuvfmt_main      = eImgFmt_NV21;//lwl modify
     //#else
-    //MINT const yuvfmt_main      = eImgFmt_YUY2;
+    MINT const yuvfmt_main      = eImgFmt_YUY2;
     //#endif
     MINT const yuvfmt_thumbnail = eImgFmt_YUY2;
     //
@@ -2108,9 +2109,13 @@ checkStreamAndEncodeLocked( MUINT32 const requestNo)
                 {
                     Mutex::Autolock _l(mEncJobLock);
                     mEncJob.setTarget(dstBuffer);
+                    //lwl add begin
+                    MINT32 transform = mShotParam.mu4Transform;
+                    MY_LOGD("lwl transform(%d)", transform);
+                    //lwl add end
                     sp<ExifJpegUtils> pExifJpegUtils = ExifJpegUtils::createInstance(
                         getOpenId(), mEncJob.HalMetadata, mShotParam.mAppSetting,
-                        mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail );
+                        mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail,transform );//lwl add
                     if ( !pExifJpegUtils.get() ) {
                         MY_LOGE("create exif jpeg encode utils fail");
                         FUNC_END;
@@ -2174,6 +2179,19 @@ postProcessing()
     //
     // ex. directly assign last source for encode
     // MY_LOGD("Ready to notify p2done & Shutter");
+    
+    //lwl add waterMark begin
+    //switch is on and the preview format is YUY2 or NV21   
+    if(mpParamsMgr->getInt("watermark") == 1)
+    {
+        IImageBuffer *pImgBuf = mEncJob.mvSource[0].pSrc_main.get();
+        MY_LOGD("waterMark: pImgBuf format is %d", pImgBuf->getImgFormat());
+        if(pImgBuf->getImgFormat() == NSCam::eImgFmt_YUY2)
+        {
+           waterMarkMake(pImgBuf);
+        } 
+     }
+	//lwl add waterMark end
     this->onP2done();
 
     /* if using BackgroundService, wait syncToken before algorithm start */
@@ -2208,6 +2226,29 @@ postProcessing()
     return OK;
 }
 
+/*******************************************************************************
+*
+********************************************************************************/
+//lwl add for waterMark begin
+int  ZsdVendorShot::waterMarkMake(IImageBuffer *pImgBuf)
+{
+        MY_LOGD("entry Nv21waterMarkMake pImgBuf is %p",pImgBuf);
+        int iret = 0;
+        WaterMark mWaterMark;
+        if(pImgBuf == NULL)
+		{
+            CAM_LOGD("pImgBuf is NULL");
+            return iret;
+        }
+        pImgBuf->lockBuf(LOG_TAG,eBUFFER_USAGE_SW_READ_MASK);
+		//waterMark begin
+        mWaterMark.watermark(pImgBuf,pImgBuf->getImgFormat(),pImgBuf->getImgSize().w,pImgBuf->getImgSize().h);
+		//waterMark end
+        pImgBuf->unlockBuf(LOG_TAG);
+        return iret;
+}
+//lwl add for waterMark end
+
 MERROR ZsdVendorShot::
 postEeAnr(
         sp<IImageBuffer> img_src,
diff --git a/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.h b/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.h
old mode 100644
new mode 100755
index 412a6ea..3ae8a2f
--- a/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.h
+++ b/middleware/v1/adapter/Scenario/Shot/ArcBeautyShot/ArcBeautyShot.h
@@ -247,7 +247,7 @@ protected:  //// handle data
     MBOOL           handleJpegData(IImageBuffer* pJpeg);
     MERROR          checkStreamAndEncodeLocked(MUINT32 const requestNo);
     MERROR          postProcessing();
-
+	int             waterMarkMake(IImageBuffer *pImgBuf);//lwl add waterMark
     // Perform P2 operation (w/ EE and ANR)
     //  @param[in]  src             Source image.
     //  @param[out] out             Output image.
diff --git a/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.cpp b/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.cpp
index 473a588..cdd2a75 100755
--- a/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.cpp
+++ b/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.cpp
@@ -85,6 +85,7 @@ using namespace NSCam::Utils;
 #include <mtkcam/middleware/v1/camutils/IDetachJobManager.h>
 #include <mtkcam/middleware/v1/camutils/PostProcessJobQueue.h>
 #include <mtkcam/feature/effectHalBase/ICallbackClientMgr.h>
+#include <mtkcam/middleware/v1/camshot/WaterMark.h>//lwl add
 
 using namespace android;
 using namespace NSShot;
@@ -1138,9 +1139,9 @@ createStreams()
     MSize const previewsize     = MSize(mShotParam.mi4PostviewWidth, mShotParam.mi4PostviewHeight);
     MINT const previewfmt       = static_cast<EImageFormat>(mShotParam.miPostviewDisplayFormat);
     //#if MTK_CAM_YUV420_JPEG_ENCODE_SUPPORT
-    MINT const yuvfmt_main      = eImgFmt_NV21;
+    ////MINT const yuvfmt_main      = eImgFmt_NV21; ///ljr modify for GM18AP-1715
     //#else
-    //MINT const yuvfmt_main      = eImgFmt_YUY2;
+    MINT const yuvfmt_main      = eImgFmt_YUY2; ///ljr modify for GM18AP-1715
     //#endif
     MINT const yuvfmt_thumbnail = eImgFmt_YUY2;
     //
@@ -2100,9 +2101,13 @@ checkStreamAndEncodeLocked( MUINT32 const requestNo)
                 {
                     Mutex::Autolock _l(mEncJobLock);
                     mEncJob.setTarget(dstBuffer);
+                    //lwl add begin
+                    MINT32 transform = mShotParam.mu4Transform;
+                    MY_LOGD("lwl transform(%d)", transform);
+                    //lwl add end
                     sp<ExifJpegUtils> pExifJpegUtils = ExifJpegUtils::createInstance(
                         getOpenId(), mEncJob.HalMetadata, mShotParam.mAppSetting,
-                        mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail );
+                        mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail,transform );//lwl add
                     if ( !pExifJpegUtils.get() ) {
                         MY_LOGE("create exif jpeg encode utils fail");
                         FUNC_END;
@@ -2181,7 +2186,7 @@ postProcessing()
     if(pFrameInfo.get())
         pFrameInfo->getFrameMetadata(eSTREAMID_META_APP_DYNAMIC_P1, metadata);
 	MINT32 iso = -1;
-	IMetadata::getEntry<MINT32>(&metadata, MTK_SENSOR_SENSITIVITY, iso); 
+	IMetadata::getEntry<MINT32>(&metadata, MTK_SENSOR_SENSITIVITY, iso);
 
     MY_LOGE("ArcSoft iso is %d",iso);
 
@@ -2198,24 +2203,24 @@ postProcessing()
 	char timeValue[100] = {0};
 	gettimeofday(&tv, NULL);
 	current_time = tv.tv_sec;
-	
+
 	MY_LOGE("ArcSoft current_time is %d", current_time);
-		
+
 	snprintf(timeValue, 20, "%d", current_time);
-	
+
 	MY_LOGE("ArcSoft timeValue is %s", timeValue);
-		
+
     for(size_t i = 0; i < mEncJob.mvSource.size(); i++)
     {
         MINT32 index = i;
         input.push_back(mEncJob.mvSource[index].pSrc_main.get());
-		
+
 		if(mDumpFlag) {
 			IImageBuffer *pBuffer = mEncJob.mvSource[index].pSrc_main.get();
-			
+
 	        String8 filename = String8::format("%s/IMG_%s_%d_%dx%d_%d",
                 DUMP_PATH, timeValue, i, pBuffer->getImgSize().w, pBuffer->getImgSize().h, iso);
-			filename += String8(".nv21");	
+			filename += String8(".nv21");
 
             pBuffer->lockBuf(LOG_TAG, eBUFFER_USAGE_SW_READ_MASK);
             pBuffer->saveToFile(filename);
@@ -2223,14 +2228,14 @@ postProcessing()
 		}
     }
     //
-	
+
     static MINT32 referPara[][5] = {
         //intensity lightIntensity saturation sharpenIntensity sceneContrast
         {20, 20, 50, 10, 0},     //200~400
         {20, 20, 50, 10, 0},       // 400~800
         {40, 20, 50, 10, 0},       // 801 ~ 1200
-        {60, 10, 50, 10, 0},       // 1201 ~ 1600
-        {70, 10, 50, 10, 0},       // 1601 ~
+        {60, 15, 50, 10, 0},       // 1201 ~ 1600
+        {70, 15, 50, 10, 0},       // 1601 ~
         {10,10,10,10,10}
 	};
 
@@ -2254,15 +2259,51 @@ postProcessing()
                       referPara[referIndex][4]);
     res = engine->Process(iso, input, index);
     engine->Finalize();
-	
+
     mEncJob.HalMetadata      = mEncJob.mvSource[index].HalMetadata;
     mEncJob.AppMetadata      = mEncJob.mvSource[index].AppMetadata;
     mEncJob.pSrc_main        = mEncJob.mvSource[index].pSrc_main;
     mEncJob.pSrc_thumbnail   = mEncJob.mvSource[index].pSrc_thumbnail;
+
+	//ljr modify waterMark begin
+    //switch is on and the preview format is YUY2 or NV21
+    if(mpParamsMgr->getInt("watermark") == 1)
+    {
+        IImageBuffer *pImgBuf = mEncJob.mvSource[index].pSrc_main.get();
+        MY_LOGD("waterMark: pImgBuf format is %d", pImgBuf->getImgFormat());
+        if(pImgBuf->getImgFormat() == NSCam::eImgFmt_YUY2)
+        {
+           waterMarkMake(pImgBuf);
+        }
+     }
+	//ljr modify waterMark end
     MY_LOGD("-");
     return OK;
 }
 
+/*******************************************************************************
+*
+********************************************************************************/
+//lwl add for waterMark begin
+int  ZsdVendorShot::waterMarkMake(IImageBuffer *pImgBuf)
+{
+        MY_LOGD("entry Nv21waterMarkMake pImgBuf is %p",pImgBuf);
+        int iret = 0;
+        WaterMark mWaterMark;
+        if(pImgBuf == NULL)
+		{
+            CAM_LOGD("pImgBuf is NULL");
+            return iret;
+        }
+        pImgBuf->lockBuf(LOG_TAG, eBUFFER_USAGE_SW_READ_MASK);
+		//waterMark begin
+        mWaterMark.watermark(pImgBuf,pImgBuf->getImgFormat(),pImgBuf->getImgSize().w,pImgBuf->getImgSize().h);
+		//waterMark end
+        pImgBuf->unlockBuf(LOG_TAG);
+        return iret;
+}
+//lwl add for waterMark end
+
 MERROR ZsdVendorShot::
 postEeAnr(
         sp<IImageBuffer> img_src,
diff --git a/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.h b/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.h
old mode 100644
new mode 100755
index 13b4c28..f277a16
--- a/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.h
+++ b/middleware/v1/adapter/Scenario/Shot/ArcLowLightShot/ArcLowLightShot.h
@@ -247,6 +247,7 @@ protected:  //// handle data
     MBOOL           handleJpegData(IImageBuffer* pJpeg);
     MERROR          checkStreamAndEncodeLocked(MUINT32 const requestNo);
     MERROR          postProcessing();
+    int             waterMarkMake(IImageBuffer *pImgBuf);//lwl add waterMark
 
     // Perform P2 operation (w/ EE and ANR)
     //  @param[in]  src             Source image.
diff --git a/middleware/v1/adapter/Scenario/Shot/VendorShot/VendorShot.cpp b/middleware/v1/adapter/Scenario/Shot/VendorShot/VendorShot.cpp
index 1c7dd36..d1e0b6b 100755
--- a/middleware/v1/adapter/Scenario/Shot/VendorShot/VendorShot.cpp
+++ b/middleware/v1/adapter/Scenario/Shot/VendorShot/VendorShot.cpp
@@ -1282,9 +1282,13 @@ checkStreamAndEncodeLocked( MUINT32 const requestNo)
     //mEncJob.pDst = dstBuffer;
     mEncJob.setTarget(dstBuffer);
     {
+        //lwl add begin
+        MINT32 transform = mShotParam.mu4Transform;
+        MY_LOGD("lwl transform(%d)", transform);
+        //lwl add end
         sp<ExifJpegUtils> pExifJpegUtils = ExifJpegUtils::createInstance(
             getOpenId(), mEncJob.HalMetadata, mShotParam.mAppSetting,
-            mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail );
+            mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail ,transform );//lwl add
         if ( !pExifJpegUtils.get() ) {
             MY_LOGE("create exif jpeg encode utils fail");
             return DEAD_OBJECT;
diff --git a/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.cpp b/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.cpp
old mode 100644
new mode 100755
index f8d2cbc..e558169
--- a/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.cpp
+++ b/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.cpp
@@ -85,6 +85,7 @@ using namespace NSCam::Utils;
 #include <mtkcam/middleware/v1/camutils/IDetachJobManager.h>
 #include <mtkcam/middleware/v1/camutils/PostProcessJobQueue.h>
 #include <mtkcam/feature/effectHalBase/ICallbackClientMgr.h>
+#include <mtkcam/middleware/v1/camshot/WaterMark.h>//lwl add
 
 using namespace android;
 using namespace NSShot;
@@ -192,15 +193,21 @@ extern
 sp<IShot>
 createInstance_ZsdVendorShot(
     char const*const    pszShotName,
+//lwl add begin
+    char const*const    pszShotMode,
     uint32_t const      u4ShotMode,
-    int32_t const       i4OpenId
+    int32_t const       i4OpenId,
+    sp<IParamsManager>  pParamsMgr
+//lwl add end
 )
 {
     sp<IShot>  pShot            = NULL;
     sp<ZsdVendorShot>  pImpShot = NULL;
     //
     //  (1.1) new Implementator.
-    pImpShot = new ZsdVendorShot(pszShotName, u4ShotMode, i4OpenId);
+//lwl modify begin
+    pImpShot = new ZsdVendorShot(pszShotName, pszShotMode, u4ShotMode, i4OpenId, pParamsMgr);
+//lwl modify end
     if  ( pImpShot == 0 ) {
         CAM_LOGE("[%s] new ZsdVendorShot", __FUNCTION__);
         goto lbExit;
@@ -314,8 +321,10 @@ onDestroy()
 ZsdVendorShot::
 ZsdVendorShot(
     char const*const pszShotName,
+    char const*const pszShotMode,
     uint32_t const u4ShotMode,
-    int32_t const i4OpenId
+    int32_t const i4OpenId,
+    sp<IParamsManager>  pParamsManager
 )
     : ImpShot(pszShotName, u4ShotMode, i4OpenId)
     , mu4Scenario(0)
@@ -339,6 +348,7 @@ ZsdVendorShot(
     , mEncJobDone(MFALSE)
     , m_spScenarioCtrl(nullptr)
     , muYuvBufferCount(1)
+    , mpParamsMgr(pParamsManager)
 {
     mDumpFlag = ::property_get_int32(DUMP_KEY, 0);
     if( mDumpFlag ) {
@@ -2094,9 +2104,13 @@ checkStreamAndEncodeLocked( MUINT32 const requestNo)
                 {
                     Mutex::Autolock _l(mEncJobLock);
                     mEncJob.setTarget(dstBuffer);
+                    //lwl add begin
+                    MINT32 transform = mShotParam.mu4Transform;
+                    MY_LOGD("lwl transform(%d)", transform);
+                    //lwl add end
                     sp<ExifJpegUtils> pExifJpegUtils = ExifJpegUtils::createInstance(
                         getOpenId(), mEncJob.HalMetadata, mShotParam.mAppSetting,
-                        mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail );
+                        mEncJob.mpDst, mEncJob.pSrc_main, mEncJob.pSrc_thumbnail,transform );//lwl add
                     if ( !pExifJpegUtils.get() ) {
                         MY_LOGE("create exif jpeg encode utils fail");
                         FUNC_END;
@@ -2160,6 +2174,21 @@ postProcessing()
     //
     // ex. directly assign last source for encode
     // MY_LOGD("Ready to notify p2done & Shutter");
+    
+    //lwl add waterMark begin
+    //switch is on and the preview format is YUY2 or NV21
+    int watermark_val =  mpParamsMgr->getInt("watermark");
+    MY_LOGD("waterMark: ZsdVendor watermark_val == %d", watermark_val);
+    if(watermark_val == 1)
+    {
+        IImageBuffer *pImgBuf = mEncJob.mvSource[0].pSrc_main.get();
+        MY_LOGD("waterMark: pImgBuf format is %d", pImgBuf->getImgFormat());
+        if(pImgBuf->getImgFormat() == NSCam::eImgFmt_YUY2)
+        {
+           waterMarkMake(pImgBuf);
+        }
+     }
+    //lwl add waterMark end
     this->onP2done();
 
     /* if using BackgroundService, wait syncToken before algorithm start */
@@ -2182,6 +2211,28 @@ postProcessing()
     return OK;
 }
 
+
+//lwl add for waterMark begin
+int  ZsdVendorShot::waterMarkMake(IImageBuffer *pImgBuf)
+{
+        MY_LOGD("entry waterMarkMake pImgBuf is %p",pImgBuf);
+        MY_LOGD("waterMark: preview format is %d",pImgBuf->getImgFormat());
+        int iret = 0;
+        WaterMark mWaterMark;
+        if(pImgBuf == NULL)
+		{
+            CAM_LOGD("pImgBuf is NULL");
+            return iret;
+        }
+        pImgBuf->lockBuf(LOG_TAG, eBUFFER_USAGE_SW_READ_MASK);
+		//waterMark begin
+		mWaterMark.watermark(pImgBuf,pImgBuf->getImgFormat(),pImgBuf->getImgSize().w,pImgBuf->getImgSize().h);
+		//waterMark end
+        pImgBuf->unlockBuf(LOG_TAG);
+        return iret;
+}
+//lwl add for waterMark end
+
 MERROR ZsdVendorShot::
 postEeAnr(
         sp<IImageBuffer> img_src,
diff --git a/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.h b/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.h
index 76fbb2e..41be962 100755
--- a/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.h
+++ b/middleware/v1/adapter/Scenario/Shot/ZsdVendorShot/ZsdVendorShot.h
@@ -210,9 +210,13 @@ typedef NSCam::v1::ISelector::BufferItemSet BufferItemSet;
 public:     ////                    Instantiation.
     virtual                         ~ZsdVendorShot();
                                     ZsdVendorShot(
+                                    //lwl modify begin
                                         char const*const pszShotName,
+                                        char const*const pszShotMode,
                                         uint32_t const u4ShotMode,
-                                        int32_t const i4OpenId
+                                        int32_t const i4OpenId,
+                                        sp<IParamsManager>  pParamsManager
+                                    //lwl modify end
                                     );
 
 public:     ////                    Operations.
@@ -464,6 +468,7 @@ protected:
     };
 
 protected:
+    int                                  waterMarkMake(IImageBuffer *pImgBuf);//lwl add waterMark
     MSize                                               mSensorSize;
     MSize                                               mJpegsize;
     MUINT32                                             mu4Scenario;
@@ -500,6 +505,7 @@ protected:
     //
 
 protected:
+    sp<IParamsManager>                                  mpParamsMgr;//lwl add
     std::vector< std::future<MERROR> >                  mvFutures;
 
     // keep original selector for switch back
diff --git a/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.cpp b/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.cpp
index f6caee2..2c1b88b 100755
--- a/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.cpp
+++ b/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.cpp
@@ -193,7 +193,8 @@ public:
                                             IMetadata &rAppMetadata,
                                             sp<IImageBufferHeap> pImgBufferHeapDst,
                                             sp<IImageBuffer> pImgBufferMain,
-                                            sp<IImageBuffer> pImgBufferThumb
+                                            sp<IImageBuffer> pImgBufferThumb,
+                                            MINT32 transform//lwl add
                                         );
 
 //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
@@ -390,6 +391,7 @@ private:    ////
     String8 const                       mName;
     MINT32                              mLogLevel;
     MINT32                              mi4OpenId;
+    MINT32                              mTransform;//lwl add
 
     // input metadata
     IMetadata                           mHalMetadata;
@@ -431,7 +433,8 @@ ExifJpegUtilsImpl(
     IMetadata &rAppMetadata,
     sp<IImageBufferHeap> pImgBufferHeapDst,
     sp<IImageBuffer> pImgBufferMain,
-    sp<IImageBuffer> pImgBufferThumb
+    sp<IImageBuffer> pImgBufferThumb,
+    MINT32 transform
 )
     : ExifJpegUtils()
     , mName(rName)
@@ -442,6 +445,7 @@ ExifJpegUtilsImpl(
     , mpSrcImgBuf_main(pImgBufferMain)
     , mpSrcImgBuf_thumbnail(pImgBufferThumb)
     //
+    , mTransform(transform)//lwl add
     , mbHasThumb()
     , muFacing()
     //
@@ -491,7 +495,8 @@ createInstance(
     IMetadata &rAppMetadata,
     sp<IImageBufferHeap> pImgBufferHeapDst,
     sp<IImageBuffer> pImgBufferMain,
-    sp<IImageBuffer> pImgBufferThumb
+    sp<IImageBuffer> pImgBufferThumb,
+    MINT32 transform   //lwl add 
 )
 {
     FUNC_START;
@@ -501,7 +506,7 @@ createInstance(
     String8 const& rName = String8(LOG_TAG);
     sp<ExifJpegUtilsImpl> pObj =  new ExifJpegUtilsImpl(
             rName, cameraId, rHalMetadata, rAppMetadata,
-            pImgBufferHeapDst, pImgBufferMain, pImgBufferThumb );
+            pImgBufferHeapDst, pImgBufferMain, pImgBufferThumb,transform );//lwl add
     if ( !pObj.get() ) {
         MY_LOGE("Instantiation fail");
         return NULL;
@@ -979,14 +984,14 @@ getOutThumbImageBuffer(
              mpSrcImgBuf_thumbnail->getImgSize().w, mpSrcImgBuf_thumbnail->getImgSize().h,
              thumbnailOffset );
     mpEncodeFrame->mParams.size_thumbnail = mpSrcImgBuf_thumbnail->getImgSize();
-    if( mbRotationThumb &&
+    /*if( mbRotationThumb &&
         ( mpEncodeFrame->mParams.orientation == 90 ||
           mpEncodeFrame->mParams.orientation == 270 ) )
     {
         MUINT temp = mpEncodeFrame->mParams.size_thumbnail.w;
         mpEncodeFrame->mParams.size_thumbnail.w = mpEncodeFrame->mParams.size_thumbnail.h;
         mpEncodeFrame->mParams.size_thumbnail.h = temp;
-    }
+    }*/
     size_t thumbnailMaxSize = (mpEncodeFrame->mParams.size_thumbnail.w) * (mpEncodeFrame->mParams.size_thumbnail.h) * 18 / 10;
 
     size_t res = thumbnailMaxSize % 128;
@@ -1090,8 +1095,17 @@ performEncodeThumbnail(
         {
             rParams.transform = 0;
         }
+        //lwl add begin
+        MY_LOGD("lwl mTransform(%d)", mTransform);
+        rParams.transform = mTransform;
+        //lwl add end
         //
         rParams.crop = calCropAspect(rParams.pSrc->getImgSize(), thumbsize);
+        //Begin: zhc add for resizing thumbnail size
+        int temp = rParams.crop.s.w;
+        rParams.crop.s.w = rParams.crop.s.h;
+        rParams.crop.s.h = temp;
+        //End: zhc add for resizing thumbnail size
         rParams.isSOI = 1;
         rParams.quality = pEncodeFrame->mParams.quality_thumbnail;
         rParams.codecType = NSSImager::JPEGENC_SW;
diff --git a/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.h b/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.h
index 6e631d1..f83f071 100755
--- a/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.h
+++ b/middleware/v1/adapter/utils/ExifJpeg/ExifJpegUtils.h
@@ -69,7 +69,8 @@ public:     ////                        Creation.
                                             IMetadata &rAppMetadata,
                                             android::sp<IImageBufferHeap> pImgBufferHeapDst,
                                             android::sp<IImageBuffer> pImgBufferMain,
-                                            android::sp<IImageBuffer> pImgBufferThumb
+                                            android::sp<IImageBuffer> pImgBufferThumb,
+                                            MINT32 transform  //lwl add
                                         );
     virtual                             ~ExifJpegUtils() {}
 
